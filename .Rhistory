legend.key.width = unit(.5, "in")) +
labs(fill = "Median Income")
data$MET2013
sum(data$MET2013 == 31080)
setwd("~/Documents/USIPC/new_proj")
setwd("~/Documents/USIPC/new_proj/out")
library(tidyverse)
nativity <- read.csv("foreign-born.csv")
race <-  read.csv("race.csv")
hispanic <- read.csv("hispanic.csv")
View(head(race))
# start with race
temp <- race %>% rename(
RAC_ASIAN = B02001_005E,
RAC_PI = B02001_006E,
RAC_BLACK = B02001_003E,
RAC_WHITE = B02001_002E,
TOTAL_POP = B02001_001E,
) %>% select(
c(GEO_ID, NAME, TOTAL_POP, RAC_WHITE, RAC_BLACK, RAC_ASIAN, RAC_PI)
)
View(temp)
hispanic %>% rename( RAC_HISP = B03003_003E) %>%
select(c(GEO_ID, RAC_HISP))
# merge in hispanic
temp <- temp %>% left_join(
(hispanic %>% rename( RAC_HISP = B03003_003E) %>%
select(c(GEO_ID, RAC_HISP))
), by = "GEO_ID")
# merge in nativity
temp <- temp %>% left_join(nativity %>% rename(
FOREIGN_BORN = B05002_013E,
FOREIGN_BORN_NONCITIZEN = B05002_021E
) %>%
select(c(GEO_ID, FOREIGN_BORN, FOREIGN_BORN_NONCITIZEN)),
by = "GEO_ID")
View(race)
View(hispanic)
View(race)
race[1,]
head(race)
setwd("~/Downloads/PD1")
library(tidyverse)
install.packages("sf")
library(sf)
library(tigris)
library(leaflet)
require("devtools")
library(devtools)
install_github("UrbanInstitute/urbnmapr")
# set your working directory
setwd("~/Downloads/PD1")
# read in acs data
if (!require("ipumsr")) stop("Reading IPUMS data into R requires the ipumsr package. It can be installed using the following command: install.packages('ipumsr')")
ddi <- read_ipums_ddi("data/usa_00012.xml") # < --- CHANGE FILE NAME
data <- read_ipums_micro(ddi)
setwd("~/Downloads/naturalizations/data")
ddi <- read_ipums_ddi("data/usa_00012.xml") # < --- CHANGE FILE NAME
# read in acs data
if (!require("ipumsr")) stop("Reading IPUMS data into R requires the ipumsr package. It can be installed using the following command: install.packages('ipumsr')")
ddi <- read_ipums_ddi("data/usa_00012.xml") # < --- CHANGE FILE NAME
setwd("~/Downloads/naturalizations/data")
ddi <- read_ipums_ddi("data/usa_00012.xml") # < --- CHANGE FILE NAME
data <- read_ipums_micro(ddi)
setwd("~/Downloads/naturalizations")
ddi <- read_ipums_ddi("data/usa_00012.xml") # < --- CHANGE FILE NAME
data <- read_ipums_micro(ddi)
# subset to california
ca <- data %>% subset(STATEFIP == 06)
# group by wage
wage_county <- ca %>% group_by(COUNTYFIP) %>% summarise(avg_wage = sum(PERWT * INCWAGE)/sum(PERWT))
wage_county <- ca %>% group_by(COUNTYFIP) %>% summarise(med_wage = median(rep(INCWAGE, PERWT)))
age_county <- ca %>% group_by(COUNTYFIP) %>% summarise(avg_age = sum(PERWT * AGE)/sum(PERWT))
# read in shapefile
sf<- st_read("US_county_2020.shp")
setwd("~/Downloads/PD1/nhgis0001_shape")
# read in shapefile
sf<- st_read("US_county_2020.shp")
setwd("~/Downloads/PD1/nhgis0001_shape/nhgis0001_shapefile_tl2020_us_county_2020")
# read in shapefile
sf<- st_read("US_county_2020.shp")
# view
head(sf)
# ======================================
#  PLOT USING TIGRIS + LEAFLET PACKAGES
# ======================================
spatial_counties <- counties("California", cb= TRUE)%>% select(c(COUNTYFP)) %>%
mutate(COUNTYFIP = as.numeric(COUNTYFP))
spatial_counties %>% head()
wage_county <- ca %>% group_by(COUNTYFIP) %>% summarise(avg_wage = sum(PERWT * INCWAGE)/sum(PERWT))
merged_county <- geo_join(spatial_counties, wage_county, by = "COUNTYFIP")
popup <- paste0("COUNTY: ", merged_county$COUNTYFIP, "<br>", "Average Wage: ", round(merged_county$avg_wage,2))
pal <- colorNumeric(
palette = "Blues",
domain = merged_county$avg_wage
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = merged_county,
fillColor = pal(merged_county$avg_wage),
color = "#b2aeae", # you need to use hex color
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal, values = merged_county$avg_wage,
title = "Average Wage",
opacity = 0.7,
position = "bottomright")
ggplot() +
geom_polygon(data = urbnmapr::states, mapping = aes(x = long, y = lat, group = group),
fill = "grey", color = "white") +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
wage_county <- wage_county %>% mutate(
GEOID = str_c("06", str_pad(COUNTYFIP, 3, side = "left", "0"))
)
attempt2 <- wage_county %>% full_join(urbnmapr::countydata, by = c("GEOID" = "county_fips")) %>%
left_join(urbnmapr::counties, by = c("GEOID" = "county_fips")) %>%
mutate(med_wage, !replace(med_wage, is.na(med_wage), 0)) %>%
subset(state_fips == "06")
ggplot(data = attempt2, mapping = aes(x = long, y = lat, group = group, fill = med_wage)) +
geom_polygon(color = "#ffffff", size = .25) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
wage_county <- wage_county %>% mutate(
GEOID = str_c("06", str_pad(COUNTYFIP, 3, side = "left", "0"))
)
attempt2 <- wage_county %>% full_join(urbnmapr::countydata, by = c("GEOID" = "county_fips")) %>%
left_join(urbnmapr::counties, by = c("GEOID" = "county_fips")) %>%
mutate(med_wage, !replace(med_wage, is.na(med_wage), 0)) %>%
subset(state_fips == "06")
wage_county <- ca %>% group_by(COUNTYFIP) %>% summarise(med_wage = median(rep(INCWAGE, PERWT)))
wage_county <- wage_county %>% mutate(
GEOID = str_c("06", str_pad(COUNTYFIP, 3, side = "left", "0"))
)
attempt2 <- wage_county %>% full_join(urbnmapr::countydata, by = c("GEOID" = "county_fips")) %>%
left_join(urbnmapr::counties, by = c("GEOID" = "county_fips")) %>%
mutate(med_wage, !replace(med_wage, is.na(med_wage), 0)) %>%
subset(state_fips == "06")
ggplot(data = attempt2, mapping = aes(x = long, y = lat, group = group, fill = med_wage)) +
geom_polygon(color = "#ffffff", size = .25) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45)
popup <- paste0("COUNTY: ", merged_county$COUNTYFIP, "<br>", "Median Wage: ", round(merged_county$avg_wage,2))
pal <- colorNumeric(
palette = "Blues",
domain = merged_county$avg_wage
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = merged_county,
fillColor = pal(merged_county$med_wage),
color = "#b2aeae", # you need to use hex color
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal, values = merged_county$med_wage,
title = "Median Wage",
opacity = 0.7,
position = "bottomright")
wage_county <- ca %>% group_by(COUNTYFIP) %>% summarise(med_wage = median(rep(INCWAGE, PERWT)))
# ======================================
#  PLOT USING TIGRIS + LEAFLET PACKAGES
# ======================================
spatial_counties <- counties("California", cb= TRUE)%>% select(c(COUNTYFP)) %>%
mutate(COUNTYFIP = as.numeric(COUNTYFP))
merged_county <- geo_join(spatial_counties, wage_county, by = "COUNTYFIP")
popup <- paste0("COUNTY: ", merged_county$COUNTYFIP, "<br>", "Median Wage: ", round(merged_county$avg_wage,2))
pal <- colorNumeric(
palette = "Blues",
domain = merged_county$med_wage
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = merged_county,
fillColor = pal(merged_county$med_wage),
color = "#b2aeae", # you need to use hex color
fillOpacity = 0.7,
weight = 1,
smoothFactor = 0.2,
popup = popup) %>%
addLegend(pal = pal, values = merged_county$med_wage,
title = "Median Wage",
opacity = 0.7,
position = "bottomright")
# =========================
# READING AND CLEANING DATA
# =========================
# read in dataframe: country of birth and state of residence
dat <- read.csv("out/natz_by_country_2016_2020.csv")
# merge in regions (source: UN)
regions <- read.csv("data/UNSD_Methodology.csv") %>% select(c("Country.or.Area", "Region.Name"))
temp <- dat %>% left_join(regions, by = c("country_birth" = "Country.or.Area"))
library(readxl)
library(tidyverse)
# =========================
# READING AND CLEANING DATA
# =========================
# read in dataframe: country of birth and state of residence
dat <- read.csv("out/natz_by_country_2016_2020.csv")
setwd("~/Downloads/naturalizations")
# =========================
# READING AND CLEANING DATA
# =========================
# read in dataframe: country of birth and state of residence
dat <- read.csv("out/natz_by_country_2016_2020.csv")
# merge in regions (source: UN)
regions <- read.csv("data/UNSD_Methodology.csv") %>% select(c("Country.or.Area", "Region.Name"))
temp <- dat %>% left_join(regions, by = c("country_birth" = "Country.or.Area"))
# =========================
# READING AND CLEANING DATA
# =========================
# read in dataframe: country of birth and state of residence
dat <- read.csv("out/natz_by_country_2016_2020.csv")
# merge in regions (source: UN)
regions <- read.csv("data/UNSD_Methodology.csv") %>% select(c("Country.or.Area", "Region.Name"))
temp <- dat %>% left_join(regions, by = c("country_birth" = "Country.or.Area"))
# not all country names are aligned, manual cleaning
# taiwan, hong kong, macau, kosovo, czechoslovakia (former), macedonia, Netherlands Antilles (former), Serbia and Montenegro (former)
# Soviet Union (former)
regions <- regions %>% mutate(
recoded_country = recode(Country.or.Area,
"Bolivia (Plurinational State of)" = "Bolivia",
"Brunei Darussalam" = "Brunei",
"Myanmar" = "Burma",
"China, People's Republic" = "China",
"Democratic Republic of the Congo"  = "Congo, Democratic Republic",
"Congo" = "Congo, Republic",
"Côte d’Ivoire" = "Cote d'Ivoire",
"Curaçao" = "Curacao",
"Iran (Islamic Republic of)" = "Iran",
"Democratic People's Republic of Korea" = "Korea, North",
"Republic of Korea"="Korea, South",
"Lao People's Democratic Republic" ="Laos",
"Micronesia (Federated States of)" ="Micronesia, Federated States",
"Republic of Moldova"= "Moldova",
"Russian Federation"= "Russia",
"Sint Maarten (Dutch part)" ="Sint Maarten",
"Syrian Arab Republic" = "Syria",
"United Republic of Tanzania" = "Tanzania",
"United Kingdom of Great Britain and Northern Ireland" = "United Kingdom",
"United States of America" = "United States",
"Venezuela (Bolivarian Republic of)" = "Venezuela",
"Viet Nam" = "Vietnam",
"British Virgin Islands" = "Virgin Islands, British",
"United States Virgin Islands" = "Virgin Islands, U.S.",
.default = Country.or.Area
)
)
# merge in regions to main data frame
temp <- dat %>% left_join(regions, by = c("country_birth" = "recoded_country"))
temp <- temp %>% mutate(
Region.Name = case_when(
country_birth == "China, People's Republic" ~ "Asia",
country_birth == "Czechoslovakia (former)" ~ "Europe",
country_birth == "Hong Kong" ~ "Asia",
country_birth == "Kosovo" ~ "Europe",
country_birth == "Macau" ~ "Asia",
country_birth == "Macedonia" ~ "Europe",
country_birth == "Netherlands Antilles (former)" ~ "Europe",
country_birth == "Soviet Union (former)" ~ "Europe",
country_birth == "Serbia and Montenegro (former)" ~ "Europe",
country_birth == "Taiwan" ~ "Asia",
country_birth == "Swaziland" ~ "Africa",
country_birth == "Eswatini (formerly Swaziland)" ~ "Africa",
country_birth == "Falkland Islands" ~ "Americas",
country_birth == "North Macedonia (formerly Macedonia)" ~ "Europe",
country_birth == "Pitcairn Islands" ~ "Europe",
country_birth == "Republic of Nauru" ~ "Oceania",
country_birth == "Total" ~ "Global",
TRUE ~ Region.Name)
)
View(temp %>% subset(is.na(Region.Name)))
# define almost swayable as the newly naturalized population is
# within 95 percent of the margin
almost_swayable <- rep(NA, 51)
for (i in 1:length(colnames(voting_states)[-c(1)])){
col <- colnames(voting_states)[-c(1)][i]
margin <- pres_2020_summary[pres_2020_summary$state == col,]$margincount_2020
margin_adj <- pres_2020_summary[pres_2020_summary$state == col,]$margincount_2020 * 0.95
origins <- sum((voting_states[,col] > margin_adj & voting_states[,col] < margin), na.rm = T)
almost_swayable[i] <- origins
}
names(almost_swayable) <- colnames(voting_states)[-c(1)]
almost_swayable %>% subset(almost_swayable > 0)
# SENATE ELECTION
newNatz <- colSums(voting_states %>% select(-c(country_birth)))
names(newNatz) <- gsub("\\.", " ", names(newNatz))
newNatz <- data.frame(state = names(newNatz), newNatz = newNatz)
senate_swayable <- senate_margins %>% left_join(newNatz, by = "state")
election_2022 <- c("ARIZONA", "COLORADO", "FLORIDA", "GEORGIA",
"MONTANA", "NORTH CAROLINA", "NEW HAMPSHIRE", 'NEVADA',
"OHIO", "PENNSYLVANIA", 'WASHINGTON', 'WISCONSIN',
'ARKANSAS', 'ALABAMA', 'CALIFORNIA', 'CONNEETICUT',
'HAWAII','INDIANA', 'IDAHO', 'ILLINOIS', 'KANSAS',
'KENTUCKY','LOUISIANA', 'MARYLAND', 'NORTH DAKOTA',
'NEW YORK', 'OKLAHOMA', 'OREGON', 'SOUTH CAROLINA',
'SOUTH DAKOTA', 'UTAH', 'VERMONT')
# ============================
# WHAT STATES ARE SWAYABLE?
# ============================
pres_2020_summary <- read.csv("out/pres_margins.csv") %>% select(c(state, margin_2020, margincount_2020))
senate_margins <- read.csv("out/senate_margins.csv")
# define almost swayable as the newly naturalized population is
# within 95 percent of the margin
almost_swayable <- rep(NA, 51)
for (i in 1:length(colnames(voting_states)[-c(1)])){
col <- colnames(voting_states)[-c(1)][i]
margin <- pres_2020_summary[pres_2020_summary$state == col,]$margincount_2020
margin_adj <- pres_2020_summary[pres_2020_summary$state == col,]$margincount_2020 * 0.95
origins <- sum((voting_states[,col] > margin_adj & voting_states[,col] < margin), na.rm = T)
almost_swayable[i] <- origins
}
names(almost_swayable) <- colnames(voting_states)[-c(1)]
almost_swayable %>% subset(almost_swayable > 0)
# PRESIDENTIAL ELECTION
# get states that are swayable (natz count is higher than margin of victory)
# make sure to run the file: "2-presidential_margins.R" first
voting_states <- temp %>% select(-c("U.S..ARMED.SERVICES.POSTS","U.S..TERRITORIES1", "UNKNOWN","TOTAL" , "GUAM", "PUERTO.RICO", "Country.or.Area", "Region.Name"))
# define almost swayable as the newly naturalized population is
# within 95 percent of the margin
almost_swayable <- rep(NA, 51)
for (i in 1:length(colnames(voting_states)[-c(1)])){
col <- colnames(voting_states)[-c(1)][i]
margin <- pres_2020_summary[pres_2020_summary$state == col,]$margincount_2020
margin_adj <- pres_2020_summary[pres_2020_summary$state == col,]$margincount_2020 * 0.95
origins <- sum((voting_states[,col] > margin_adj & voting_states[,col] < margin), na.rm = T)
almost_swayable[i] <- origins
}
names(almost_swayable) <- colnames(voting_states)[-c(1)]
almost_swayable %>% subset(almost_swayable > 0)
# SENATE ELECTION
newNatz <- colSums(voting_states %>% select(-c(country_birth)))
names(newNatz) <- gsub("\\.", " ", names(newNatz))
newNatz <- data.frame(state = names(newNatz), newNatz = newNatz)
senate_swayable <- senate_margins %>% left_join(newNatz, by = "state")
election_2022 <- c("ARIZONA", "COLORADO", "FLORIDA", "GEORGIA",
"MONTANA", "NORTH CAROLINA", "NEW HAMPSHIRE", 'NEVADA',
"OHIO", "PENNSYLVANIA", 'WASHINGTON', 'WISCONSIN',
'ARKANSAS', 'ALABAMA', 'CALIFORNIA', 'CONNEETICUT',
'HAWAII','INDIANA', 'IDAHO', 'ILLINOIS', 'KANSAS',
'KENTUCKY','LOUISIANA', 'MARYLAND', 'NORTH DAKOTA',
'NEW YORK', 'OKLAHOMA', 'OREGON', 'SOUTH CAROLINA',
'SOUTH DAKOTA', 'UTAH', 'VERMONT')
not_safe <- c("ARIZONA", "COLORADO", "FLORIDA", "GEORGIA",
"MONTANA", "NORTH CAROLINA", "NEW HAMPSHIRE", 'NEVADA',
"OHIO", "PENNSYLVANIA", 'WASHINGTON', 'WISCONSIN')
safe <- c('ARKANSAS', 'ALABAMA', 'CALIFORNIA', 'CONNEETICUT',
'HAWAII','INDIANA', 'IDAHO', 'ILLINOIS', 'KANSAS',
'KENTUCKY','LOUISIANA', 'MARYLAND', 'NORTH DAKOTA',
'NEW YORK', 'OKLAHOMA', 'OREGON', 'SOUTH CAROLINA',
'SOUTH DAKOTA', 'UTAH', 'VERMONT')
senate_swayable <- senate_swayable %>% mutate(
election_2022 = case_when(state %in% election_2022 ~ 1,
TRUE ~ 0 ),
safe = case_when(state %in% not_safe ~ 0,
state %in% safe ~ 1,
TRUE ~ as.numeric(NA))
)
# =============================================================
# IN EACH STATE, WHERE ARE THE NEWLY NATURALIZED CITIZENS FROM?
# =============================================================
# aggregate by region (currently aggregated by country)
by_regions <- temp %>% group_by(Region.Name) %>%  summarise_if(is.numeric, sum, na.rm = TRUE)
View(senate_swayable)
View(newNatz)
View(voting_states)
View(newNatz)
View(temp)
View(voting_states)
View(voting_states %>% select(c("country_birth", swayable_states)))
View(voting_states %>% select(c("country_birth", swayable_states)))
# PRESIDENTIAL ELECTION
# get states that are swayable (natz count is higher than margin of victory)
# make sure to run the file: "2-presidential_margins.R" first
voting_states <- temp %>% select(-c("U.S..ARMED.SERVICES.POSTS","U.S..TERRITORIES1", "UNKNOWN","TOTAL" , "GUAM", "PUERTO.RICO", "Country.or.Area", "Region.Name"))
swayable <- rep(NA, 51)
for (i in 1:length(colnames(voting_states)[-c(1)])){
col <- colnames(voting_states)[-c(1)][i]
margin <- pres_2020_summary[pres_2020_summary$state == col,]$margincount_2020
origins <- sum(voting_states[,col] > margin, na.rm = T)
swayable[i] <- origins
}
names(swayable) <- colnames(voting_states)[-c(1)]
swayable %>% subset(swayable > 0)
swayable_states <- names(swayable[swayable>=1])
View(voting_states %>% select(c("country_birth", swayable_states)))
sum(voting_states$ARIZONA)
# SENATE ELECTION
newNatz <-voting_states %>% subset(country_birth == "Total")
names(newNatz) <- gsub("\\.", " ", names(newNatz))
newNatz <- data.frame(state = names(newNatz), newNatz = newNatz)
View(newNatz)
# PRESIDENTIAL ELECTION
# get states that are swayable (natz count is higher than margin of victory)
# make sure to run the file: "2-presidential_margins.R" first
voting_states <- temp %>% select(-c("U.S..ARMED.SERVICES.POSTS","U.S..TERRITORIES1", "UNKNOWN","TOTAL" , "GUAM", "PUERTO.RICO", "Country.or.Area", "Region.Name"))
# SENATE ELECTION
newNatz <-voting_states %>% subset(country_birth == "Total")
newNatz
names(newNatz) <- gsub("\\.", " ", names(newNatz))
newNatz
senate_swayable <- senate_margins %>% left_join(newNatz, by = "state")
View(newNatz)
newNatz <- data.frame(state = colnames(newNatz), newNatz = newNatz)
View(newNatz)
# SENATE ELECTION
newNatz <-voting_states %>% subset(country_birth == "Total")
newNatz
names(newNatz)
names(newNatz) <- gsub("\\.", " ", names(newNatz))
newNatz
View(newNatz)
as.vector(newNarz)
as.vector(newNatz)
newNatz <- data.frame(state = colnames(newNatz), newNatz = as.vector(newNatz))
View(newNatz)
# SENATE ELECTION
newNatz <-voting_states %>% subset(country_birth == "Total")
names(newNatz) <- gsub("\\.", " ", names(newNatz))
data.frame(newNatz)
t(newNatz)
t(newNatz)
t(newNatz)[-c(1),]
View(t(newNatz)[-c(1),])
names(newNatz)
names(newNatz)[-c(-1)]
names(newNatz)[-c(1)]
newNatz[-1,]
newNatz[, -c(1)]
states = names(newNatz)[-c(1)]
values = newNatz[, -c(1)]
newNatz <- data.frame(state = states, newNatz = values)
newNatz
values
# SENATE ELECTION
newNatz <-voting_states %>% subset(country_birth == "Total")
names(newNatz) <- gsub("\\.", " ", names(newNatz))
states = names(newNatz)[-c(1)]
values = as.vector(newNatz[, -c(1)])
values = as.vector(newNatz[, -c(1)])
View(values)
values = t(newNatz[, -c(1)])
View(values)
values = t(newNatz[, -c(1)]) %>% rename(newNatz = "210")
values = as.data.frame(t(newNatz[, -c(1)])) %>% rename(newNatz = "210")
View(values)
newNatz = as.data.frame(t(newNatz[, -c(1)])) %>% rename(newNatz = "210")
newNatz = as.data.frame(t(newNatz[, -c(1)])) %>% rename(newNatz = "210")  %>%
mutate(state = states)
# SENATE ELECTION
newNatz <-voting_states %>% subset(country_birth == "Total")
names(newNatz) <- gsub("\\.", " ", names(newNatz))
states = names(newNatz)[-c(1)]
newNatz = as.data.frame(t(newNatz[, -c(1)])) %>% rename(newNatz = "210")  %>%
mutate(state = states)
View(newNatz)
senate_swayable <- senate_margins %>% left_join(newNatz, by = "state")
election_2022 <- c("ARIZONA", "COLORADO", "FLORIDA", "GEORGIA",
"MONTANA", "NORTH CAROLINA", "NEW HAMPSHIRE", 'NEVADA',
"OHIO", "PENNSYLVANIA", 'WASHINGTON', 'WISCONSIN',
'ARKANSAS', 'ALABAMA', 'CALIFORNIA', 'CONNEETICUT',
'HAWAII','INDIANA', 'IDAHO', 'ILLINOIS', 'KANSAS',
'KENTUCKY','LOUISIANA', 'MARYLAND', 'NORTH DAKOTA',
'NEW YORK', 'OKLAHOMA', 'OREGON', 'SOUTH CAROLINA',
'SOUTH DAKOTA', 'UTAH', 'VERMONT')
not_safe <- c("ARIZONA", "COLORADO", "FLORIDA", "GEORGIA",
"MONTANA", "NORTH CAROLINA", "NEW HAMPSHIRE", 'NEVADA',
"OHIO", "PENNSYLVANIA", 'WASHINGTON', 'WISCONSIN')
safe <- c('ARKANSAS', 'ALABAMA', 'CALIFORNIA', 'CONNEETICUT',
'HAWAII','INDIANA', 'IDAHO', 'ILLINOIS', 'KANSAS',
'KENTUCKY','LOUISIANA', 'MARYLAND', 'NORTH DAKOTA',
'NEW YORK', 'OKLAHOMA', 'OREGON', 'SOUTH CAROLINA',
'SOUTH DAKOTA', 'UTAH', 'VERMONT')
senate_swayable <- senate_swayable %>% mutate(
election_2022 = case_when(state %in% election_2022 ~ 1,
TRUE ~ 0 ),
safe = case_when(state %in% not_safe ~ 0,
state %in% safe ~ 1,
TRUE ~ as.numeric(NA))
)
View(senate_swayable)
View(voting_states)
View(newNatz)
senate_swayable <- senate_margins %>% left_join(newNatz, by = "state")
View(senate_swayable)
election_2022 <- c("ARIZONA", "COLORADO", "FLORIDA", "GEORGIA",
"MONTANA", "NORTH CAROLINA", "NEW HAMPSHIRE", 'NEVADA',
"OHIO", "PENNSYLVANIA", 'WASHINGTON', 'WISCONSIN',
'ARKANSAS', 'ALABAMA', 'CALIFORNIA', 'CONNEETICUT',
'HAWAII','INDIANA', 'IDAHO', 'ILLINOIS', 'KANSAS',
'KENTUCKY','LOUISIANA', 'MARYLAND', 'NORTH DAKOTA',
'NEW YORK', 'OKLAHOMA', 'OREGON', 'SOUTH CAROLINA',
'SOUTH DAKOTA', 'UTAH', 'VERMONT')
not_safe <- c("ARIZONA", "COLORADO", "FLORIDA", "GEORGIA",
"MONTANA", "NORTH CAROLINA", "NEW HAMPSHIRE", 'NEVADA',
"OHIO", "PENNSYLVANIA", 'WASHINGTON', 'WISCONSIN')
safe <- c('ARKANSAS', 'ALABAMA', 'CALIFORNIA', 'CONNEETICUT',
'HAWAII','INDIANA', 'IDAHO', 'ILLINOIS', 'KANSAS',
'KENTUCKY','LOUISIANA', 'MARYLAND', 'NORTH DAKOTA',
'NEW YORK', 'OKLAHOMA', 'OREGON', 'SOUTH CAROLINA',
'SOUTH DAKOTA', 'UTAH', 'VERMONT')
senate_swayable <- senate_swayable %>% mutate(
election_2022 = case_when(state %in% election_2022 ~ 1,
TRUE ~ 0 ),
safe = case_when(state %in% not_safe ~ 0,
state %in% safe ~ 1,
TRUE ~ as.numeric(NA))
)
col = "ARIZONA"
voting_states[,col]
sum(voting_states[,col] > margin, na.rm = T)
View(voting_states)
